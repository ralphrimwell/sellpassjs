/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkPaymentMethodsUpdate from '../model/BulkPaymentMethodsUpdate';
import CreateProductV2Request from '../model/CreateProductV2Request';
import Int64BaseResponse from '../model/Int64BaseResponse';
import ObjectBaseResponse from '../model/ObjectBaseResponse';

/**
* ProductsV2 service.
* @module api/ProductsV2Api
* @version v1
*/
export default class ProductsV2Api {

    /**
    * Constructs a new ProductsV2Api. 
    * @alias module:api/ProductsV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the selfShopIdV2ProductsBulkUpdatePaymentMethodsPut operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsBulkUpdatePaymentMethodsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk payment-methods update
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BulkPaymentMethodsUpdate} opts.bulkPaymentMethodsUpdate 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsBulkUpdatePaymentMethodsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdV2ProductsBulkUpdatePaymentMethodsPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bulkPaymentMethodsUpdate'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsBulkUpdatePaymentMethodsPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products/bulk/update/payment-methods', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdV2ProductsGet operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get products
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {String} opts.searchString 
     * @param {String} opts.orderBy 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdV2ProductsGet(shopId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsGet");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
        'PageNumber': opts['pageNumber'],
        'PageSize': opts['pageSize'],
        'searchString': opts['searchString'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdV2ProductsPost operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Int64BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new product
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateProductV2Request} opts.createProductV2Request 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Int64BaseResponse}
     */
    selfShopIdV2ProductsPost(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createProductV2Request'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsPost");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Int64BaseResponse;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdV2ProductsProductIdGet operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsProductIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product
     * @param {Number} shopId 
     * @param {Number} productId 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsProductIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdV2ProductsProductIdGet(shopId, productId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsProductIdGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling selfShopIdV2ProductsProductIdGet");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdV2ProductsProductIdPut operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsProductIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product
     * @param {Number} shopId 
     * @param {Number} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateProductV2Request} opts.createProductV2Request 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsProductIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdV2ProductsProductIdPut(shopId, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createProductV2Request'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsProductIdPut");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling selfShopIdV2ProductsProductIdPut");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdV2ProductsProductIdSeoImagePost operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsProductIdSeoImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectBaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update seo image
     * @param {Number} shopId 
     * @param {Number} productId 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsProductIdSeoImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectBaseResponse}
     */
    selfShopIdV2ProductsProductIdSeoImagePost(shopId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsProductIdSeoImagePost");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling selfShopIdV2ProductsProductIdSeoImagePost");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ObjectBaseResponse;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products/{productId}/seo/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdV2ProductsProductIdThumbnailPost operation.
     * @callback module:api/ProductsV2Api~selfShopIdV2ProductsProductIdThumbnailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectBaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product thumbnail
     * @param {Number} shopId 
     * @param {Number} productId 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/ProductsV2Api~selfShopIdV2ProductsProductIdThumbnailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectBaseResponse}
     */
    selfShopIdV2ProductsProductIdThumbnailPost(shopId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdV2ProductsProductIdThumbnailPost");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling selfShopIdV2ProductsProductIdThumbnailPost");
      }

      let pathParams = {
        'shopId': shopId,
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ObjectBaseResponse;
      return this.apiClient.callApi(
        '/self/{shopId}/v2/products/{productId}/thumbnail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
