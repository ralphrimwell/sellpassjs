/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeCashappRequest from '../model/ChangeCashappRequest';
import ChangeCoinbaseCommerceRequest from '../model/ChangeCoinbaseCommerceRequest';
import ChangePayPalEmailRequest from '../model/ChangePayPalEmailRequest';
import ChangePayPalFFRequest from '../model/ChangePayPalFFRequest';
import ChangeStripeConnectRequest from '../model/ChangeStripeConnectRequest';
import ChangeVirtualPaymentsRequest from '../model/ChangeVirtualPaymentsRequest';

/**
* PaymentsShopSettings service.
* @module api/PaymentsShopSettingsApi
* @version v1
*/
export default class PaymentsShopSettingsApi {

    /**
    * Constructs a new PaymentsShopSettingsApi. 
    * @alias module:api/PaymentsShopSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the selfShopIdSettingsPaymentsCashappPut operation.
     * @callback module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsCashappPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeCashappRequest} opts.changeCashappRequest 
     * @param {module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsCashappPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPaymentsCashappPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeCashappRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPaymentsCashappPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/payments/cashapp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsPaymentsCoinbasecommercePut operation.
     * @callback module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsCoinbasecommercePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeCoinbaseCommerceRequest} opts.changeCoinbaseCommerceRequest 
     * @param {module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsCoinbasecommercePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPaymentsCoinbasecommercePut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeCoinbaseCommerceRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPaymentsCoinbasecommercePut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/payments/coinbasecommerce', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsPaymentsPaypalFfPut operation.
     * @callback module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsPaypalFfPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePayPalFFRequest} opts.changePayPalFFRequest 
     * @param {module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsPaypalFfPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPaymentsPaypalFfPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePayPalFFRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPaymentsPaypalFfPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/payments/paypal-ff', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsPaymentsPaypalemailPut operation.
     * @callback module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsPaypalemailPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePayPalEmailRequest} opts.changePayPalEmailRequest 
     * @param {module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsPaypalemailPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPaymentsPaypalemailPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePayPalEmailRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPaymentsPaypalemailPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/payments/paypalemail', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsPaymentsStripeconnectPut operation.
     * @callback module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsStripeconnectPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeStripeConnectRequest} opts.changeStripeConnectRequest 
     * @param {module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsStripeconnectPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPaymentsStripeconnectPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeStripeConnectRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPaymentsStripeconnectPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/payments/stripeconnect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsPaymentsVirtualPaymentsPut operation.
     * @callback module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsVirtualPaymentsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeVirtualPaymentsRequest} opts.changeVirtualPaymentsRequest 
     * @param {module:api/PaymentsShopSettingsApi~selfShopIdSettingsPaymentsVirtualPaymentsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPaymentsVirtualPaymentsPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeVirtualPaymentsRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPaymentsVirtualPaymentsPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/payments/virtual-payments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
