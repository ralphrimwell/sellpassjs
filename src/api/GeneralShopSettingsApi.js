/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeShopCurrencyRequest from '../model/ChangeShopCurrencyRequest';
import ChangeShopNameRequest from '../model/ChangeShopNameRequest';
import ChangeShopPopupRequest from '../model/ChangeShopPopupRequest';
import ChangeShopStatusRequest from '../model/ChangeShopStatusRequest';
import ChangeShopTimezoneRequest from '../model/ChangeShopTimezoneRequest';
import ChangeSubDomainRequest from '../model/ChangeSubDomainRequest';
import ChangeTermsRequest from '../model/ChangeTermsRequest';

/**
* GeneralShopSettings service.
* @module api/GeneralShopSettingsApi
* @version v1
*/
export default class GeneralShopSettingsApi {

    /**
    * Constructs a new GeneralShopSettingsApi. 
    * @alias module:api/GeneralShopSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the selfShopIdSettingsCurrencyPut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsCurrencyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeShopCurrencyRequest} opts.changeShopCurrencyRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsCurrencyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsCurrencyPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeShopCurrencyRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsCurrencyPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/currency', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsGet operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsGet(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsGet");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsNamePut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeShopNameRequest} opts.changeShopNameRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsNamePut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeShopNameRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsNamePut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsPopupPut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsPopupPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeShopPopupRequest} opts.changeShopPopupRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsPopupPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsPopupPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeShopPopupRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsPopupPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/popup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsStatusPut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsStatusPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeShopStatusRequest} opts.changeShopStatusRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsStatusPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeShopStatusRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsStatusPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsSubdomainPut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsSubdomainPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSubDomainRequest} opts.changeSubDomainRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsSubdomainPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsSubdomainPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSubDomainRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsSubdomainPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/subdomain', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsTermsPut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsTermsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeTermsRequest} opts.changeTermsRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsTermsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsTermsPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeTermsRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsTermsPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/terms', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsTimezonePut operation.
     * @callback module:api/GeneralShopSettingsApi~selfShopIdSettingsTimezonePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeShopTimezoneRequest} opts.changeShopTimezoneRequest 
     * @param {module:api/GeneralShopSettingsApi~selfShopIdSettingsTimezonePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsTimezonePut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeShopTimezoneRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsTimezonePut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/timezone', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
