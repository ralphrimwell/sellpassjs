/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeShopDesignRequest from '../model/ChangeShopDesignRequest';
import ChangeSocialLinksRequest from '../model/ChangeSocialLinksRequest';
import ChangeStorefrontText from '../model/ChangeStorefrontText';

/**
* DesignShopSettings service.
* @module api/DesignShopSettingsApi
* @version v1
*/
export default class DesignShopSettingsApi {

    /**
    * Constructs a new DesignShopSettingsApi. 
    * @alias module:api/DesignShopSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the selfShopIdSettingsDesignLinksPut operation.
     * @callback module:api/DesignShopSettingsApi~selfShopIdSettingsDesignLinksPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSocialLinksRequest} opts.changeSocialLinksRequest 
     * @param {module:api/DesignShopSettingsApi~selfShopIdSettingsDesignLinksPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsDesignLinksPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeSocialLinksRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsDesignLinksPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/design/links', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsDesignLogoPost operation.
     * @callback module:api/DesignShopSettingsApi~selfShopIdSettingsDesignLogoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/DesignShopSettingsApi~selfShopIdSettingsDesignLogoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsDesignLogoPost(shopId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsDesignLogoPost");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/design/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsDesignPut operation.
     * @callback module:api/DesignShopSettingsApi~selfShopIdSettingsDesignPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeShopDesignRequest} opts.changeShopDesignRequest 
     * @param {module:api/DesignShopSettingsApi~selfShopIdSettingsDesignPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsDesignPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeShopDesignRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsDesignPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/design', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsDesignStorefrontLogoPost operation.
     * @callback module:api/DesignShopSettingsApi~selfShopIdSettingsDesignStorefrontLogoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/DesignShopSettingsApi~selfShopIdSettingsDesignStorefrontLogoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsDesignStorefrontLogoPost(shopId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsDesignStorefrontLogoPost");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/design/storefront/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdSettingsDesignStorefrontPut operation.
     * @callback module:api/DesignShopSettingsApi~selfShopIdSettingsDesignStorefrontPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeStorefrontText} opts.changeStorefrontText 
     * @param {module:api/DesignShopSettingsApi~selfShopIdSettingsDesignStorefrontPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdSettingsDesignStorefrontPut(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeStorefrontText'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdSettingsDesignStorefrontPut");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/settings/design/storefront', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
