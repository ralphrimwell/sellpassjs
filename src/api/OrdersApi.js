/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReplacementRequest from '../model/ReplacementRequest';
import ResendInvoiceRequest from '../model/ResendInvoiceRequest';

/**
* Orders service.
* @module api/OrdersApi
* @version v1
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the selfShopIdInvoicesGet operation.
     * @callback module:api/OrdersApi~selfShopIdInvoicesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all invoices
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {String} opts.searchString 
     * @param {module:api/OrdersApi~selfShopIdInvoicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdInvoicesGet(shopId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdInvoicesGet");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
        'PageNumber': opts['pageNumber'],
        'PageSize': opts['pageSize'],
        'searchString': opts['searchString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdInvoicesInvoiceIdGet operation.
     * @callback module:api/OrdersApi~selfShopIdInvoicesInvoiceIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get invoice
     * @param {Number} shopId 
     * @param {String} invoiceId 
     * @param {module:api/OrdersApi~selfShopIdInvoicesInvoiceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdInvoicesInvoiceIdGet(shopId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdInvoicesInvoiceIdGet");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling selfShopIdInvoicesInvoiceIdGet");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/invoices/{invoiceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdInvoicesInvoiceIdProcessPost operation.
     * @callback module:api/OrdersApi~selfShopIdInvoicesInvoiceIdProcessPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process invoice
     * @param {Number} shopId 
     * @param {String} invoiceId 
     * @param {module:api/OrdersApi~selfShopIdInvoicesInvoiceIdProcessPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdInvoicesInvoiceIdProcessPost(shopId, invoiceId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdInvoicesInvoiceIdProcessPost");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling selfShopIdInvoicesInvoiceIdProcessPost");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/invoices/{invoiceId}/process', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdInvoicesInvoiceIdReplacementPost operation.
     * @callback module:api/OrdersApi~selfShopIdInvoicesInvoiceIdReplacementPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace invoice
     * @param {Number} shopId 
     * @param {String} invoiceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReplacementRequest} opts.replacementRequest 
     * @param {module:api/OrdersApi~selfShopIdInvoicesInvoiceIdReplacementPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdInvoicesInvoiceIdReplacementPost(shopId, invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['replacementRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdInvoicesInvoiceIdReplacementPost");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling selfShopIdInvoicesInvoiceIdReplacementPost");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/invoices/{invoiceId}/replacement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdInvoicesInvoiceIdResendPost operation.
     * @callback module:api/OrdersApi~selfShopIdInvoicesInvoiceIdResendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend email to customer
     * @param {Number} shopId 
     * @param {String} invoiceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResendInvoiceRequest} opts.resendInvoiceRequest 
     * @param {module:api/OrdersApi~selfShopIdInvoicesInvoiceIdResendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdInvoicesInvoiceIdResendPost(shopId, invoiceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['resendInvoiceRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdInvoicesInvoiceIdResendPost");
      }
      // verify the required parameter 'invoiceId' is set
      if (invoiceId === undefined || invoiceId === null) {
        throw new Error("Missing the required parameter 'invoiceId' when calling selfShopIdInvoicesInvoiceIdResendPost");
      }

      let pathParams = {
        'shopId': shopId,
        'invoiceId': invoiceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/invoices/{invoiceId}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
