/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCouponRequest from '../model/CreateCouponRequest';

/**
* Coupons service.
* @module api/CouponsApi
* @version v1
*/
export default class CouponsApi {

    /**
    * Constructs a new CouponsApi. 
    * @alias module:api/CouponsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the selfShopIdCouponsCouponIdDelete operation.
     * @callback module:api/CouponsApi~selfShopIdCouponsCouponIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Coupon
     * @param {Number} shopId 
     * @param {Number} couponId 
     * @param {module:api/CouponsApi~selfShopIdCouponsCouponIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdCouponsCouponIdDelete(shopId, couponId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdCouponsCouponIdDelete");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling selfShopIdCouponsCouponIdDelete");
      }

      let pathParams = {
        'shopId': shopId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/coupons/{couponId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdCouponsCouponIdGet operation.
     * @callback module:api/CouponsApi~selfShopIdCouponsCouponIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Coupon
     * @param {Number} shopId 
     * @param {Number} couponId 
     * @param {module:api/CouponsApi~selfShopIdCouponsCouponIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdCouponsCouponIdGet(shopId, couponId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdCouponsCouponIdGet");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling selfShopIdCouponsCouponIdGet");
      }

      let pathParams = {
        'shopId': shopId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/coupons/{couponId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdCouponsCouponIdPut operation.
     * @callback module:api/CouponsApi~selfShopIdCouponsCouponIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Coupon
     * @param {Number} shopId 
     * @param {Number} couponId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCouponRequest} opts.createCouponRequest 
     * @param {module:api/CouponsApi~selfShopIdCouponsCouponIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdCouponsCouponIdPut(shopId, couponId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createCouponRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdCouponsCouponIdPut");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling selfShopIdCouponsCouponIdPut");
      }

      let pathParams = {
        'shopId': shopId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/coupons/{couponId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdCouponsGet operation.
     * @callback module:api/CouponsApi~selfShopIdCouponsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {String} opts.searchString 
     * @param {module:api/CouponsApi~selfShopIdCouponsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdCouponsGet(shopId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdCouponsGet");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
        'PageNumber': opts['pageNumber'],
        'PageSize': opts['pageSize'],
        'searchString': opts['searchString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the selfShopIdCouponsPost operation.
     * @callback module:api/CouponsApi~selfShopIdCouponsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Coupon
     * @param {Number} shopId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCouponRequest} opts.createCouponRequest 
     * @param {module:api/CouponsApi~selfShopIdCouponsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    selfShopIdCouponsPost(shopId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createCouponRequest'];
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling selfShopIdCouponsPost");
      }

      let pathParams = {
        'shopId': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/self/{shopId}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
