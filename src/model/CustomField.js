/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomFieldTypes from './CustomFieldTypes';

/**
 * The CustomField model module.
 * @module model/CustomField
 * @version v1
 */
class CustomField {
    /**
     * Constructs a new <code>CustomField</code>.
     * @alias module:model/CustomField
     * @param type {module:model/CustomFieldTypes} 
     * @param name {String} 
     * @param required {Boolean} 
     */
    constructor(type, name, required) { 
        
        CustomField.initialize(this, type, name, required);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, name, required) { 
        obj['type'] = type;
        obj['name'] = name;
        obj['required'] = required;
    }

    /**
     * Constructs a <code>CustomField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomField} obj Optional instance to populate.
     * @return {module:model/CustomField} The populated <code>CustomField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomField();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = CustomFieldTypes.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('valueString')) {
                obj['valueString'] = ApiClient.convertToType(data['valueString'], 'String');
            }
            if (data.hasOwnProperty('placeholder')) {
                obj['placeholder'] = ApiClient.convertToType(data['placeholder'], 'String');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = ApiClient.convertToType(data['regex'], 'String');
            }
            if (data.hasOwnProperty('valueInt')) {
                obj['valueInt'] = ApiClient.convertToType(data['valueInt'], 'Number');
            }
            if (data.hasOwnProperty('valueBool')) {
                obj['valueBool'] = ApiClient.convertToType(data['valueBool'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomField.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['valueString'] && !(typeof data['valueString'] === 'string' || data['valueString'] instanceof String)) {
            throw new Error("Expected the field `valueString` to be a primitive type in the JSON string but got " + data['valueString']);
        }
        // ensure the json data is a string
        if (data['placeholder'] && !(typeof data['placeholder'] === 'string' || data['placeholder'] instanceof String)) {
            throw new Error("Expected the field `placeholder` to be a primitive type in the JSON string but got " + data['placeholder']);
        }
        // ensure the json data is a string
        if (data['regex'] && !(typeof data['regex'] === 'string' || data['regex'] instanceof String)) {
            throw new Error("Expected the field `regex` to be a primitive type in the JSON string but got " + data['regex']);
        }

        return true;
    }


}

CustomField.RequiredProperties = ["type", "name", "required"];

/**
 * @member {Number} id
 */
CustomField.prototype['id'] = undefined;

/**
 * @member {module:model/CustomFieldTypes} type
 */
CustomField.prototype['type'] = undefined;

/**
 * @member {String} name
 */
CustomField.prototype['name'] = undefined;

/**
 * @member {Boolean} required
 */
CustomField.prototype['required'] = undefined;

/**
 * @member {String} valueString
 */
CustomField.prototype['valueString'] = undefined;

/**
 * @member {String} placeholder
 */
CustomField.prototype['placeholder'] = undefined;

/**
 * @member {String} regex
 */
CustomField.prototype['regex'] = undefined;

/**
 * @member {Number} valueInt
 */
CustomField.prototype['valueInt'] = undefined;

/**
 * @member {Boolean} valueBool
 */
CustomField.prototype['valueBool'] = undefined;






export default CustomField;

