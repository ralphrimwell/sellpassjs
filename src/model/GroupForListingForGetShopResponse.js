/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupTypes from './GroupTypes';
import ItemInListingsData from './ItemInListingsData';

/**
 * The GroupForListingForGetShopResponse model module.
 * @module model/GroupForListingForGetShopResponse
 * @version v1
 */
class GroupForListingForGetShopResponse {
    /**
     * Constructs a new <code>GroupForListingForGetShopResponse</code>.
     * @alias module:model/GroupForListingForGetShopResponse
     */
    constructor() { 
        
        GroupForListingForGetShopResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GroupForListingForGetShopResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupForListingForGetShopResponse} obj Optional instance to populate.
     * @return {module:model/GroupForListingForGetShopResponse} The populated <code>GroupForListingForGetShopResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupForListingForGetShopResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('cfImageId')) {
                obj['cfImageId'] = ApiClient.convertToType(data['cfImageId'], 'String');
            }
            if (data.hasOwnProperty('listings')) {
                obj['listings'] = ApiClient.convertToType(data['listings'], [ItemInListingsData]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = GroupTypes.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupForListingForGetShopResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupForListingForGetShopResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['cfImageId'] && !(typeof data['cfImageId'] === 'string' || data['cfImageId'] instanceof String)) {
            throw new Error("Expected the field `cfImageId` to be a primitive type in the JSON string but got " + data['cfImageId']);
        }
        if (data['listings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listings'])) {
                throw new Error("Expected the field `listings` to be an array in the JSON data but got " + data['listings']);
            }
            // validate the optional field `listings` (array)
            for (const item of data['listings']) {
                ItemInListingsData.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
GroupForListingForGetShopResponse.prototype['id'] = undefined;

/**
 * @member {String} title
 */
GroupForListingForGetShopResponse.prototype['title'] = undefined;

/**
 * @member {String} description
 */
GroupForListingForGetShopResponse.prototype['description'] = undefined;

/**
 * @member {String} cfImageId
 */
GroupForListingForGetShopResponse.prototype['cfImageId'] = undefined;

/**
 * @member {Array.<module:model/ItemInListingsData>} listings
 */
GroupForListingForGetShopResponse.prototype['listings'] = undefined;

/**
 * @member {module:model/GroupTypes} type
 */
GroupForListingForGetShopResponse.prototype['type'] = undefined;






export default GroupForListingForGetShopResponse;

