/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomField from './CustomField';
import DiscordSocialConnectSettingsForVariantProductRequest from './DiscordSocialConnectSettingsForVariantProductRequest';
import DynamicType from './DynamicType';
import GatewayForCreateProductV2Variant from './GatewayForCreateProductV2Variant';
import Price from './Price';
import ProductTypes from './ProductTypes';
import SerialsTypeRequest from './SerialsTypeRequest';
import ServicesType from './ServicesType';
import WarrantyRequest from './WarrantyRequest';

/**
 * The CreateProductV2Variant model module.
 * @module model/CreateProductV2Variant
 * @version v1
 */
class CreateProductV2Variant {
    /**
     * Constructs a new <code>CreateProductV2Variant</code>.
     * @alias module:model/CreateProductV2Variant
     */
    constructor() { 
        
        CreateProductV2Variant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateProductV2Variant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateProductV2Variant} obj Optional instance to populate.
     * @return {module:model/CreateProductV2Variant} The populated <code>CreateProductV2Variant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateProductV2Variant();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('priceDetails')) {
                obj['priceDetails'] = Price.constructFromObject(data['priceDetails']);
            }
            if (data.hasOwnProperty('gateways')) {
                obj['gateways'] = ApiClient.convertToType(data['gateways'], [GatewayForCreateProductV2Variant]);
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ProductTypes.constructFromObject(data['productType']);
            }
            if (data.hasOwnProperty('asDynamic')) {
                obj['asDynamic'] = DynamicType.constructFromObject(data['asDynamic']);
            }
            if (data.hasOwnProperty('asSerials')) {
                obj['asSerials'] = SerialsTypeRequest.constructFromObject(data['asSerials']);
            }
            if (data.hasOwnProperty('asService')) {
                obj['asService'] = ServicesType.constructFromObject(data['asService']);
            }
            if (data.hasOwnProperty('customerNote')) {
                obj['customerNote'] = ApiClient.convertToType(data['customerNote'], 'String');
            }
            if (data.hasOwnProperty('redirectUrl')) {
                obj['redirectUrl'] = ApiClient.convertToType(data['redirectUrl'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], [CustomField]);
            }
            if (data.hasOwnProperty('warranty')) {
                obj['warranty'] = WarrantyRequest.constructFromObject(data['warranty']);
            }
            if (data.hasOwnProperty('discordSocialConnectSettings')) {
                obj['discordSocialConnectSettings'] = DiscordSocialConnectSettingsForVariantProductRequest.constructFromObject(data['discordSocialConnectSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateProductV2Variant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateProductV2Variant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `priceDetails`
        if (data['priceDetails']) { // data not null
          Price.validateJSON(data['priceDetails']);
        }
        if (data['gateways']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gateways'])) {
                throw new Error("Expected the field `gateways` to be an array in the JSON data but got " + data['gateways']);
            }
            // validate the optional field `gateways` (array)
            for (const item of data['gateways']) {
                GatewayForCreateProductV2Variant.validateJsonObject(item);
            };
        }
        // validate the optional field `asDynamic`
        if (data['asDynamic']) { // data not null
          DynamicType.validateJSON(data['asDynamic']);
        }
        // validate the optional field `asSerials`
        if (data['asSerials']) { // data not null
          SerialsTypeRequest.validateJSON(data['asSerials']);
        }
        // validate the optional field `asService`
        if (data['asService']) { // data not null
          ServicesType.validateJSON(data['asService']);
        }
        // ensure the json data is a string
        if (data['customerNote'] && !(typeof data['customerNote'] === 'string' || data['customerNote'] instanceof String)) {
            throw new Error("Expected the field `customerNote` to be a primitive type in the JSON string but got " + data['customerNote']);
        }
        // ensure the json data is a string
        if (data['redirectUrl'] && !(typeof data['redirectUrl'] === 'string' || data['redirectUrl'] instanceof String)) {
            throw new Error("Expected the field `redirectUrl` to be a primitive type in the JSON string but got " + data['redirectUrl']);
        }
        if (data['customFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customFields'])) {
                throw new Error("Expected the field `customFields` to be an array in the JSON data but got " + data['customFields']);
            }
            // validate the optional field `customFields` (array)
            for (const item of data['customFields']) {
                CustomField.validateJsonObject(item);
            };
        }
        // validate the optional field `warranty`
        if (data['warranty']) { // data not null
          WarrantyRequest.validateJSON(data['warranty']);
        }
        // validate the optional field `discordSocialConnectSettings`
        if (data['discordSocialConnectSettings']) { // data not null
          DiscordSocialConnectSettingsForVariantProductRequest.validateJSON(data['discordSocialConnectSettings']);
        }

        return true;
    }


}



/**
 * Pass it only if you are editing the existing variant
 * @member {Number} id
 */
CreateProductV2Variant.prototype['id'] = undefined;

/**
 * Title of the variant
 * @member {String} title
 */
CreateProductV2Variant.prototype['title'] = undefined;

/**
 * Description of the variant
 * @member {String} description
 */
CreateProductV2Variant.prototype['description'] = undefined;

/**
 * @member {module:model/Price} priceDetails
 */
CreateProductV2Variant.prototype['priceDetails'] = undefined;

/**
 * Gateways available for this variant
 * @member {Array.<module:model/GatewayForCreateProductV2Variant>} gateways
 */
CreateProductV2Variant.prototype['gateways'] = undefined;

/**
 * @member {module:model/ProductTypes} productType
 */
CreateProductV2Variant.prototype['productType'] = undefined;

/**
 * @member {module:model/DynamicType} asDynamic
 */
CreateProductV2Variant.prototype['asDynamic'] = undefined;

/**
 * @member {module:model/SerialsTypeRequest} asSerials
 */
CreateProductV2Variant.prototype['asSerials'] = undefined;

/**
 * @member {module:model/ServicesType} asService
 */
CreateProductV2Variant.prototype['asService'] = undefined;

/**
 * This note will be visible to customer after purchase
 * @member {String} customerNote
 */
CreateProductV2Variant.prototype['customerNote'] = undefined;

/**
 * Customer will be redirected to this url after purchase
 * @member {String} redirectUrl
 */
CreateProductV2Variant.prototype['redirectUrl'] = undefined;

/**
 * Custom fields of the variant
 * @member {Array.<module:model/CustomField>} customFields
 */
CreateProductV2Variant.prototype['customFields'] = undefined;

/**
 * @member {module:model/WarrantyRequest} warranty
 */
CreateProductV2Variant.prototype['warranty'] = undefined;

/**
 * @member {module:model/DiscordSocialConnectSettingsForVariantProductRequest} discordSocialConnectSettings
 */
CreateProductV2Variant.prototype['discordSocialConnectSettings'] = undefined;






export default CreateProductV2Variant;

