/**
 * SellPass.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnnouncementData model module.
 * @module model/AnnouncementData
 * @version v1
 */
class AnnouncementData {
    /**
     * Constructs a new <code>AnnouncementData</code>.
     * @alias module:model/AnnouncementData
     */
    constructor() { 
        
        AnnouncementData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnouncementData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnouncementData} obj Optional instance to populate.
     * @return {module:model/AnnouncementData} The populated <code>AnnouncementData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnouncementData();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('buttonText')) {
                obj['buttonText'] = ApiClient.convertToType(data['buttonText'], 'String');
            }
            if (data.hasOwnProperty('buttonLink')) {
                obj['buttonLink'] = ApiClient.convertToType(data['buttonLink'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnouncementData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnouncementData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }
        // ensure the json data is a string
        if (data['buttonText'] && !(typeof data['buttonText'] === 'string' || data['buttonText'] instanceof String)) {
            throw new Error("Expected the field `buttonText` to be a primitive type in the JSON string but got " + data['buttonText']);
        }
        // ensure the json data is a string
        if (data['buttonLink'] && !(typeof data['buttonLink'] === 'string' || data['buttonLink'] instanceof String)) {
            throw new Error("Expected the field `buttonLink` to be a primitive type in the JSON string but got " + data['buttonLink']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
AnnouncementData.prototype['id'] = undefined;

/**
 * @member {String} path
 */
AnnouncementData.prototype['path'] = undefined;

/**
 * @member {String} title
 */
AnnouncementData.prototype['title'] = undefined;

/**
 * @member {String} shortDescription
 */
AnnouncementData.prototype['shortDescription'] = undefined;

/**
 * @member {String} buttonText
 */
AnnouncementData.prototype['buttonText'] = undefined;

/**
 * @member {String} buttonLink
 */
AnnouncementData.prototype['buttonLink'] = undefined;

/**
 * @member {Date} createdAt
 */
AnnouncementData.prototype['createdAt'] = undefined;






export default AnnouncementData;

